[aws]
# environment -
# The environment configured in your AWS CLI setup.
#
# If you have not set up your AWS CLI profiles, then run the following and supply the proper values:
#   aws configure --profile prod
#   aws configure --profile dev
# Reference: https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-quickstart.html#cli-configure-quickstart-profiles
environment = dev

[bucket]
# name -
# The name of the S3 bucket to use.

# prod bucket name
name = XXX

[logging]
# logging_level -
# The maximum level of logging verbosity to use. STDOUT/STDERR verbosity is also impacted.
# values:
#   FATAL   = 1
#   INFO    = 2
#   WARN    = 3
#   DEBUG   = 4
logging_level = 3

# log_to_file -
# Boolean indicating whether to log to a file or not
# values: True|False
log_to_file = True

# log_file -
# Path to the log file being written to
# values: path.log
log_file = /opt/pythontechtest/sortie.log

[ingestion]
# mode -
# Mode to use for determining which files to sort.
#
# values: track_list | dynamic | cache
#
# `track_list`
# Loads the files you need from a list of tracks to sort in the bucket.
#
# `dynamic`
# Will search the objects in the bucket, scanning for mp3's recursively.  This is  assuming you have the permissions to
# list objects  This feature is experimental.  This is useful for recurring batch jobs.
#
# `cache`
# Will use the directory specified by the cache.directory setting as its track list assuming a flat file configuration.
# This is useful for when you need to do some staging locally.
# Setting to track_list for demo since it explicitly does what the instructions say.
mode = track_list

# requires ingestion.mode to be set to track_list
track_list = /opt/pythontechtest/conf/tracklist.json


[targeting]
# sort_mask -
# The target pattern to use for the path in the S3 bucket that the files go.  The formatting uses a jinja template
# style.  Interpolation keys should represent the name of the source MP3's ID3 tag.
sort_mask = Music/{{ artist }}/{{ album }}/{{ title }}.mp3

# clean_up -
# Tells sortie whether or not to delete the files it sorts after the upload.
#
# values: True|False
clean_up = True

[cache]
# since mp3 tags can't be read in place from an S3 bucket, sortie downloads them to a cache folder, reads their tags,
# and then re-uploads according to targeting.sort_mask and then cleans up the originals.

# directory -
# The directory to use for caching.  It will be created if it does not already exist.
directory = /opt/pythontechtest/cache

# persistent -
# Whether to keep the cache or not between runs.  If set to False, sortie will delete the cache folder after running.
persistent = False
